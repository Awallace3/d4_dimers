import pandas as pd
import subprocess
from os.path import exists
import os
from tqdm import tqdm
from .jobs import basis_labels
import numpy as np
from . import ssi_data
from qm_tools_aw import tools


def ssi_bfdb_data(df: pd.DataFrame, basis: str = "adz"):
    """
    collects data for SSI database
    """
    url = "https://raw.githubusercontent.com/loriab/qcdb/master/data/SSI_pt2misc.py"
    if not exists("ssi_aug_cc_pvdz_ie.py"):
        subprocess.call("curl '%s' > ssi_aug_cc_pvdz_ie.py" % url, shell=True)
    df2 = df.loc[df["DB"] == "SSI"]
    ind1 = df.index[df["DB"] == "SSI"]
    for i in tqdm(ind1, ascii=True, desc="Gathering SSI HF_%s" % basis):
        s = df.loc[i, "System"]
        s = s.replace("Residue ", "")
        s = s.replace(" and ", "-")
        s = s.replace(" interaction No. ", "-")
        cmd = (
            """grep '%s' ssi_aug_cc_pvdz_ie.py | grep "'HF'" | grep "'CP'" | grep "'%s'" | sed 's/=/ /g' | sed 's/)//g' | awk '{print $(NF)}'"""
            % (s, basis)
        )
        v = subprocess.run(cmd, shell=True, capture_output=True)
        v = float(v.stdout)
        df.loc[i, "HF_%s" % basis] = v
    return df


def acquire_ssi_charges(df: pd.DataFrame):
    df2 = df.loc[df["DB"] == "SSI"]
    ind1 = df.index[df["DB"] == "SSI"]
    ssi_geoms = ssi_data.ssi_geoms()
    charges_new = [i for i in df["charges"].to_list()]
    for i in tqdm(ind1, ascii=True, desc="Gathering SSI Charges"):
        s = df.loc[i, "System"]
        s = s.replace("Residue ", "")
        s = s.replace(" and ", "-")
        s = s.replace(" interaction No. ", "-")
        s = f"SSI-{s}-dimer"
        geom = ssi_geoms[s]
        geom, pD, cD, ma, mb, charges = tools.mol_to_pos_carts_ma_mb(geom)
        c_old = df.loc[i, "charges"]
        charges_new[i] = charges
        if i == 4928:
            print(i, c_old, charges, charges_new[i], sep="\n")
            tools.print_cartesians(geom, True)
            g_df = df.loc[i, "Geometry"]
            print()
            tools.print_cartesians(g_df, True)

    df["charges_new"] = charges_new
    for i in ind1:
        if np.all(df.loc[i, "charges_new"] != df.loc[i, "charges"]):
            print(i, df.loc[i, "charges_new"])
    return


def collect_HF_energy(
    file: str,
) -> float:
    """
    collect_HF_energy reads psi4 output from .jobs.create_hf_binding_energies_jobs to
    collect HF energy value
    """
    cmd = "grep 'Counterpoise Corrected' %s -n | awk '{print $1}' | sed 's/://'" % file
    p = subprocess.run(cmd, shell=True, capture_output=True)
    try:
        p = int(p.stdout) + 2
        with open(file, "r") as f:
            d = f.readlines()[p:]
        pos = 0
        for n, i in enumerate(d):
            if i == "\n":
                break
            else:
                pos = n
        d = d[pos].split()[-1]
        return float(d)
    except ValueError:
        return np.nan


def harvest_data(
    df: pd.DataFrame,
    basis: str,
    overwrite: bool = False,
    data_dir: str = "calc",
    in_file: str = "dimer",
) -> pd.DataFrame:
    """
    harvest_data collects data generated by .jobs.create_hf_binding_energies_jobs
    """
    if basis == "dftd4":
        basis = "jdz_dftd4"
    basis_set, meth_basis_dir = basis_labels(basis)
    method = "hf/%s" % basis_set
    # df = df.iloc[[0, 1, 2, 3, 5, ]]
    # for idx, item in df.iterrows():
    for idx, item in tqdm(
        df.iterrows(),
        total=df.shape[0],
        desc="Gathering %s" % method,
        ascii=True,
    ):
        col = "HF_%s" % basis
        v = df.loc[idx, col]
        if not np.isnan(v) and not overwrite:
            # print("Data Already filled")
            continue
        p = "%d_%s" % (idx, item["DB"].replace(" - ", "_"))
        out_p = "%s/%s/%s/%s/%s.out" % (data_dir, data_dir, p, meth_basis_dir, in_file)
        # if 'dftd4' in out_p:
        #     print(out_p)
        if os.path.exists(out_p):
            HF = collect_HF_energy(out_p)
            df.loc[idx, col] = HF
    print(df["HF_%s" % basis])
    return df
