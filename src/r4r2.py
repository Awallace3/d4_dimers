import math

def r4r2_ls() -> []:
    """
    provides r4 divided by r2 for dftd4
    """
    vals = [
        8.0589,
        3.4698,  # H,He
        29.0974,
        14.8517,
        11.8799,
        7.8715,
        5.5588,
        4.7566,
        3.8025,
        3.1036,  # Li-Ne
        26.1552,
        17.2304,
        17.7210,
        12.7442,
        9.5361,
        8.1652,
        6.7463,
        5.6004,  # Na-Ar
        29.2012,
        22.3934,  # K,Ca
        19.0598,
        16.8590,
        15.4023,
        12.5589,
        13.4788,  # Sc-
        12.2309,
        11.2809,
        10.5569,
        10.1428,
        9.4907,  # -Zn
        13.4606,
        10.8544,
        8.9386,
        8.1350,
        7.1251,
        6.1971,  # Ga-Kr
        30.0162,
        24.4103,  # Rb,Sr
        20.3537,
        17.4780,
        13.5528,
        11.8451,
        11.0355,  # Y-
        10.1997,
        9.5414,
        9.0061,
        8.6417,
        8.9975,  # -Cd
        14.0834,
        11.8333,
        10.0179,
        9.3844,
        8.4110,
        7.5152,  # In-Xe
        32.7622,
        27.5708,  # Cs,Ba
        23.1671,
        21.6003,
        20.9615,
        20.4562,
        20.1010,
        19.7475,
        19.4828,  # La-Eu
        15.6013,
        19.2362,
        17.4717,
        17.8321,
        17.4237,
        17.1954,
        17.1631,  # Gd-Yb
        14.5716,
        15.8758,
        13.8989,
        12.4834,
        11.4421,  # Lu-
        10.2671,
        8.3549,
        7.8496,
        7.3278,
        7.4820,  # -Hg
        13.5124,
        11.6554,
        10.0959,
        9.7340,
        8.8584,
        8.0125,  # Tl-Rn
        29.8135,
        26.3157,  # Fr,Ra
        19.1885,
        15.8542,
        16.1305,
        15.6161,
        15.1226,
        16.1576,
        14.6510,  # Ac-Am
        14.7178,
        13.9108,
        13.5623,
        13.2326,
        12.9189,
        12.6133,
        12.3142,  # Cm-No
        14.8326,
        12.3771,
        10.6378,
        9.3638,
        8.2297,  # Lr-
        7.5667,
        6.9456,
        6.3946,
        5.9159,
        5.4929,  # -Cn
        6.7286,
        6.5144,
        10.9169,
        10.3600,
        9.4723,
        8.6641,
    ]  # Nh-Og
        # real(wp), parameter :: sqrt_z_r4_over_r2(max_elem) = &
        # &  sqrt(0.5_wp*(r4_over_r2*[(sqrt(real(idum,wp)),idum=1,max_elem)]))
        #
    vals = [math.sqrt(0.5 * i * math.sqrt(n + 1)) for n, i in enumerate(vals)]
    return vals

def r4r2_vals(atom_number: int) -> float:
    """
    provides r4 divided by r2 for dftd4
    """
    vals = [
        8.0589,
        3.4698,  # H,He
        29.0974,
        14.8517,
        11.8799,
        7.8715,
        5.5588,
        4.7566,
        3.8025,
        3.1036,  # Li-Ne
        26.1552,
        17.2304,
        17.7210,
        12.7442,
        9.5361,
        8.1652,
        6.7463,
        5.6004,  # Na-Ar
        29.2012,
        22.3934,  # K,Ca
        19.0598,
        16.8590,
        15.4023,
        12.5589,
        13.4788,  # Sc-
        12.2309,
        11.2809,
        10.5569,
        10.1428,
        9.4907,  # -Zn
        13.4606,
        10.8544,
        8.9386,
        8.1350,
        7.1251,
        6.1971,  # Ga-Kr
        30.0162,
        24.4103,  # Rb,Sr
        20.3537,
        17.4780,
        13.5528,
        11.8451,
        11.0355,  # Y-
        10.1997,
        9.5414,
        9.0061,
        8.6417,
        8.9975,  # -Cd
        14.0834,
        11.8333,
        10.0179,
        9.3844,
        8.4110,
        7.5152,  # In-Xe
        32.7622,
        27.5708,  # Cs,Ba
        23.1671,
        21.6003,
        20.9615,
        20.4562,
        20.1010,
        19.7475,
        19.4828,  # La-Eu
        15.6013,
        19.2362,
        17.4717,
        17.8321,
        17.4237,
        17.1954,
        17.1631,  # Gd-Yb
        14.5716,
        15.8758,
        13.8989,
        12.4834,
        11.4421,  # Lu-
        10.2671,
        8.3549,
        7.8496,
        7.3278,
        7.4820,  # -Hg
        13.5124,
        11.6554,
        10.0959,
        9.7340,
        8.8584,
        8.0125,  # Tl-Rn
        29.8135,
        26.3157,  # Fr,Ra
        19.1885,
        15.8542,
        16.1305,
        15.6161,
        15.1226,
        16.1576,
        14.6510,  # Ac-Am
        14.7178,
        13.9108,
        13.5623,
        13.2326,
        12.9189,
        12.6133,
        12.3142,  # Cm-No
        14.8326,
        12.3771,
        10.6378,
        9.3638,
        8.2297,  # Lr-
        7.5667,
        6.9456,
        6.3946,
        5.9159,
        5.4929,  # -Cn
        6.7286,
        6.5144,
        10.9169,
        10.3600,
        9.4723,
        8.6641,
    ]  # Nh-Og
    return 0.5 * vals[atom_number - 1]


def get_Q(atom_number: int) -> float:
    """
    provides r4 divided by r2 for dftd4
    """
    vals = [
        8.0589,
        3.4698,  # H,He
        29.0974,
        14.8517,
        11.8799,
        7.8715,
        5.5588,
        4.7566,
        3.8025,
        3.1036,  # Li-Ne
        26.1552,
        17.2304,
        17.7210,
        12.7442,
        9.5361,
        8.1652,
        6.7463,
        5.6004,  # Na-Ar
        29.2012,
        22.3934,  # K,Ca
        19.0598,
        16.8590,
        15.4023,
        12.5589,
        13.4788,  # Sc-
        12.2309,
        11.2809,
        10.5569,
        10.1428,
        9.4907,  # -Zn
        13.4606,
        10.8544,
        8.9386,
        8.1350,
        7.1251,
        6.1971,  # Ga-Kr
        30.0162,
        24.4103,  # Rb,Sr
        20.3537,
        17.4780,
        13.5528,
        11.8451,
        11.0355,  # Y-
        10.1997,
        9.5414,
        9.0061,
        8.6417,
        8.9975,  # -Cd
        14.0834,
        11.8333,
        10.0179,
        9.3844,
        8.4110,
        7.5152,  # In-Xe
        32.7622,
        27.5708,  # Cs,Ba
        23.1671,
        21.6003,
        20.9615,
        20.4562,
        20.1010,
        19.7475,
        19.4828,  # La-Eu
        15.6013,
        19.2362,
        17.4717,
        17.8321,
        17.4237,
        17.1954,
        17.1631,  # Gd-Yb
        14.5716,
        15.8758,
        13.8989,
        12.4834,
        11.4421,  # Lu-
        10.2671,
        8.3549,
        7.8496,
        7.3278,
        7.4820,  # -Hg
        13.5124,
        11.6554,
        10.0959,
        9.7340,
        8.8584,
        8.0125,  # Tl-Rn
        29.8135,
        26.3157,  # Fr,Ra
        19.1885,
        15.8542,
        16.1305,
        15.6161,
        15.1226,
        16.1576,
        14.6510,  # Ac-Am
        14.7178,
        13.9108,
        13.5623,
        13.2326,
        12.9189,
        12.6133,
        12.3142,  # Cm-No
        14.8326,
        12.3771,
        10.6378,
        9.3638,
        8.2297,  # Lr-
        7.5667,
        6.9456,
        6.3946,
        5.9159,
        5.4929,  # -Cn
        6.7286,
        6.5144,
        10.9169,
        10.3600,
        9.4723,
        8.6641,
    ]  # Nh-Og
    return math.sqrt(atom_number) * vals[atom_number]


def r4r2_from_elements_call(
    atomic_position: int,
) -> float:
    """
    r4r2_from_elements_call uses r4r2 value from calling build_dummy in src/setup.py
    """
    r4r2 = [
        1.0622,
        0.8289,
        2.6564,
        2.0393,
        1.9286,
        1.6431,
        1.4350,
        1.3725,
        1.2638,
        1.1722,
        3.4851,
        2.8909,
        2.9910,
        2.5839,
        2.2740,
        2.1385,
        1.9735,
        1.8240,
        4.2216,
        3.7446,
        3.4970,
        3.3274,
        3.2160,
        2.9350,
        3.0718,
        2.9550,
        2.8648,
        2.7967,
        2.7654,
        2.6978,
        3.2394,
        2.9321,
        2.6813,
        2.5771,
        2.4294,
        2.2817,
        5.0561,
        4.5901,
        4.2187,
        3.9341,
        3.4858,
        3.2784,
        3.1831,
        3.0778,
        2.9936,
        2.9244,
        2.8801,
        2.9543,
        3.7153,
        3.4228,
        3.1650,
        3.0782,
        2.9281,
        2.7807,
        5.8326,
        5.3747,
        4.9487,
        4.7992,
        4.7480,
        4.7102,
        4.6884,
        4.6660,
        4.6531,
        4.1803,
        4.6599,
        4.4580,
        4.5207,
        4.4852,
        4.4720,
        4.4839,
        4.1462,
        4.3430,
        4.0776,
        3.8776,
        3.7248,
        3.5401,
        3.2039,
        3.1155,
        3.0198,
        3.0610,
        4.1264,
        3.8442,
        3.5886,
        3.5343,
        3.3816,
        3.2255,
        6.2398,
        5.8791,
        5.0345,
        4.5890,
        4.6416,
        4.5795,
        4.5188,
        4.6833,
        4.4715,
        4.4934,
        4.3798,
        4.3357,
        4.2936,
        4.2530,
        4.2129,
        4.1729,
        4.5910,
        4.2039,
        3.9067,
        3.6740,
        3.4524,
        3.3181,
        3.1864,
        3.0644,
        2.9541,
        2.8529,
        3.1646,
        3.1207,
        4.0487,
        3.9526,
        3.7876,
        3.6301,
    ]
    return r4r2[atomic_position - 1]
